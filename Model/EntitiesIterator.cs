//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Runtime.Serialization;

namespace Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Customer))]
    [KnownType(typeof(Order))]
    public class EntitiesIterator : IEnumerable<object>
    {
        [DataMember(Name = "Items")]
        protected HashSet<object> _items;
    
        #region Constructors
    
        private EntitiesIterator()
        {
        }
    
        #endregion
    
    	#region Factory Methods
    
        public static EntitiesIterator Create<T>(T entity)
        {
            EntitiesIterator iterator = new EntitiesIterator();
            iterator.Visit(entity);
            return iterator;
        }
    
        #endregion
    
        #region Execute Methods
    
        public void Execute<TFilter>(Action<TFilter> action)
        {
            foreach (var item in Items.OfType<TFilter>())
            {
                action(item);
            }
        }
    
        public static void Execute<TFilter>(EntitiesIterator iterator, Action<TFilter> action)
        {
            foreach (var item in iterator.Items.OfType<TFilter>())
            {
                action(item);
            }
        }
    
        public static void Execute<TEntity, TFilter>(TEntity entity, Action<TFilter> action)
        {
            EntitiesIterator iterator = EntitiesIterator.Create(entity);
            foreach (var item in iterator.Items.OfType<TFilter>())
            {
                action(item);
            }
        }
    
        #endregion
    
        #region Properties
    
        public ReadOnlyCollection<object> Items
        {
            get
            {
                return WritableItems.ToList().AsReadOnly();
            }
        }
    
        protected HashSet<object> WritableItems
        {
            get
            {
                if (_items == null)
                {
                    _items = new HashSet<object>();
                }
                return _items;
            }
        }
    
        #endregion
    
        #region Visit Method
    
        internal void Visit(dynamic entity)
        {
            if (entity != null && !WritableItems.Contains(entity))
            {
                WritableItems.Add(entity);
                EntitiesExtensions.Traverse(entity, this);
            }
        }
    
        #endregion
    
        #region IEnumerable Implementation
    
        IEnumerator<object> IEnumerable<object>.GetEnumerator()
        {
            return Items.GetEnumerator();
        }
    
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return Items.GetEnumerator();
        }
    
        #endregion
    }
    
    public static partial class EntitiesExtensions
    {
    	#region Traverse Methods
    
    	internal static void Traverse(this Customer entity, EntitiesIterator visitor)
        {
            if (entity.Orders != null)
            {
                foreach (var value in entity.Orders)
                {
                    visitor.Visit(value);
                }
            }
        }
    
    	internal static void Traverse(this Order entity, EntitiesIterator visitor)
        {
            if (entity.Customer != null)
            {
            	visitor.Visit(entity.Customer);
            }
        }
    
    	#endregion
    }
    
}

